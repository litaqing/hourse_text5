<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd"
>

    <!-- 基于注解的方式完成IOC 容器对bean的管理,除去controller的所有组件 -->
    <!--指明要要扫描的包及其子包  -->

    <!--    <context:component-scan base-package="com.myssm.paul>">-->
    <!--        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
    <!--    </context:component-scan>-->
    <context:annotation-config></context:annotation-config>
    <context:component-scan base-package="com.myssm.paul.dao"></context:component-scan>
    <context:component-scan base-package="com.myssm.paul.pojo"></context:component-scan>
    <context:component-scan base-package="com.myssm.paul.service"></context:component-scan>
    <context:component-scan base-package="com.myssm.paul.controller"></context:component-scan>


    <!--配置数据源-->
    <context:property-placeholder location="classpath:dbconf.properties"></context:property-placeholder>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--整合mybatis
    目的：管理所有的组件mapper
        service===>com.myssm.paul.mapper  @autowired 自动注入
        管理事务：申明式事务
    -->
    <!--step 1: 配置sqlSessionFactory  此处就可将原先的mybatis.xml-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!--指明mybatis中配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis.xml"></property>
        <!--        <property name="typeAliasesPackage" value="com.myssm.paul.mapper"/>-->
        <!--配置mapper.xml文件的位置，一般该类文件在ssm中与mybatis配置文件放在同一个路径下（资源路径下）
        z这里需要注意的是一点要指明具体的文件
        -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
        <!--注册pageHelper插件-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <!--使用下面的方式配置参数，一行配置一个 -->
                        <value>
                            params=value1
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!--扫描所有的xxxMapper.java文件-->
    <mybatis:scan base-package="com.myssm.paul.dao"></mybatis:scan>

    <!--step 2: 配置事务管理器 并开启注解式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg name="dataSource" ref="dataSource" />
    </bean>

    <!--此处，如果事务管理器是默认名称，则可以写成
        <tx:annotation-driven/>
    -->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>
</beans>
